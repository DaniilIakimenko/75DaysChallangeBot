const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');
const cron = require('node-cron');
const { setTimeout } = require('timers/promises');
const fetch = require('node-fetch');
const net = require('net');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8166894974:AAF1smiSyx8G5R5_NUcZC39vtb4J4wMYYtQ';
const PORT = process.env.PORT || 3000;
const WEBHOOK_DOMAIN = process.env.WEBHOOK_DOMAIN || 'seven5dayschallangebot.onrender.com';
const MAX_RETRIES = 5;
const INITIAL_DELAY = 10000; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
mongoose.connect('mongodb+srv://dayakimenko666:Ye6G5NcPK6yM2M6O@cluster0.qlpkysv.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', {
  connectTimeoutMS: 10000,
  socketTimeoutMS: 45000,
  serverSelectionTimeoutMS: 10000
})
.then(() => console.log('‚úÖ Connected to MongoDB'))
.catch(err => console.error('‚ùå MongoDB connection error:', err));

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSchema = new mongoose.Schema({
  telegramId: { type: Number, unique: true },
  name: String,
  age: Number,
  weight: Number,
  bodyParams: {
    waist: Number,
    hips: Number,
    arms: Number,
    legs: Number,
  },
  wakeUpTime: { type: String, default: "07:30" },
  dailyCheckins: [{
    date: Date,
    wokeUpOnTime: Boolean,
    pagesRead: Number,
    exercised: Boolean,
    photoProof: String,
  }],
  currentDay: { type: Number, default: 0 },
});

const User = mongoose.model('User', UserSchema);

// Health check endpoint
bot.use(async (ctx, next) => {
  if (ctx.webhookReply && ctx.update.url === '/health') {
    try {
      await ctx.reply('‚úÖ Bot is healthy');
      return;
    } catch (e) {
      console.error('Health check error:', e);
    }
  }
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è 75-–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
bot.on('text', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (!user) {
    const name = ctx.message.text;
    const newUser = new User({ telegramId: ctx.from.id, name });
    await newUser.save();
    await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${name}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.`);
  } else if (!user.age) {
    const age = parseInt(ctx.message.text);
    if (isNaN(age)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.');
    } else {
      user.age = age;
      await user.save();
      await ctx.reply(`–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥).`);
    }
  } else if (!user.weight) {
    const weight = parseFloat(ctx.message.text);
    if (isNaN(weight)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.');
    } else {
      user.weight = weight;
      await user.save();
      await ctx.reply('–í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ß–µ–ª–ª–µ–Ω–¥–∂ –≥–æ—Ç–æ–≤ –∫ —Å—Ç–∞—Ä—Ç—É.');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
bot.action('woke_up_yes', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  user.dailyCheckins.push({ date: new Date(), wokeUpOnTime: true });
  await user.save();
  ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç—ã –ø—Ä–æ—á–∏—Ç–∞–ª?');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
  const photoId = ctx.message.photo[0].file_id;
  const user = await User.findOne({ telegramId: ctx.from.id });
  user.dailyCheckins[user.dailyCheckins.length - 1].photoProof = photoId;
  await user.save();
  ctx.reply('–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!');
});

// –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
cron.schedule('0 12 * * 1', async () => {
  const users = await User.find({});
  users.forEach(user => {
    const progress = `–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é:\n` +
      `–î–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.dailyCheckins.filter(c => c.wokeUpOnTime).length}/7\n` +
      `–°—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${user.dailyCheckins.reduce((sum, c) => sum + (c.pagesRead || 0), 0)}`;
    bot.telegram.sendMessage(user.telegramId, progress);
  });
});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
async function setupWebhook(retryCount = 0) {
  try {
    console.log(`üîÑ Attempt ${retryCount + 1}: Setting webhook...`);
    
    const currentWebhook = await bot.telegram.getWebhookInfo();
    if (currentWebhook.url === `https://${WEBHOOK_DOMAIN}/webhook`) {
      console.log('‚úÖ Webhook already set correctly');
      return true;
    }

    await bot.telegram.deleteWebhook({ drop_pending_updates: true });
    await setTimeout(1000);
    
    await bot.telegram.setWebhook(`https://${WEBHOOK_DOMAIN}/webhook`, {
      max_connections: 40,
      allowed_updates: ['message', 'callback_query']
    });
    
    console.log('‚úÖ Webhook successfully set');
    return true;
  } catch (error) {
    if (retryCount >= MAX_RETRIES - 1) {
      console.error('‚ùå Max retries reached for webhook setup');
      throw error;
    }

    const delay = error.response?.parameters?.retry_after 
      ? error.response.parameters.retry_after * 1000 
      : INITIAL_DELAY * (retryCount + 1) + Math.random() * 1000;
    
    console.log(`‚è≥ Retry after ${delay}ms (Reason: ${error.description || error.message})`);
    await setTimeout(delay);
    return setupWebhook(retryCount + 1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
async function ensurePortIsFree(port) {
  return new Promise((resolve) => {
    const server = net.createServer();
    server.once('error', (err) => {
      if (err.code === 'EADDRINUSE') {
        console.log(`‚ö†Ô∏è Port ${port} is in use, waiting to free it...`);
        setTimeout(resolve, 2000); // –î–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
      }
    });
    server.once('listening', () => {
      server.close();
      resolve();
    });
    server.listen(port);
  });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer(retryCount = 0) {
  try {
    if (process.env.NODE_ENV === 'production') {
      await setupWebhook();
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
      await ensurePortIsFree(PORT);

      // –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
      await bot.launch({
        webhook: {
          domain: WEBHOOK_DOMAIN,
          port: PORT,
          hookPath: '/webhook',
          tlsOptions: null
        }
      });
      
      console.log(`üöÄ Bot running in webhook mode on port ${PORT}`);
      console.log(`üåê Webhook URL: https://${WEBHOOK_DOMAIN}/webhook`);
      
      // Keep-alive –¥–ª—è Render
      setInterval(async () => {
        try {
          await fetch(`https://${WEBHOOK_DOMAIN}/health`);
        } catch (e) {
          console.log('Keep-alive ping failed (normal for free tier)');
        }
      }, 4 * 60 * 1000);
    } else {
      await bot.launch();
      console.log('üîç Bot running in polling mode');
    }
    
    console.log('ü§ñ Bot is fully operational');
  } catch (error) {
    if (error.code === 429 && retryCount < MAX_RETRIES) {
      const delay = error.response?.parameters?.retry_after 
        ? error.response.parameters.retry_after * 1000 
        : INITIAL_DELAY * (retryCount + 1) + Math.random() * 1000;
      
      console.log(`‚è≥ Bot launch failed with 429, retrying after ${delay}ms`);
      await bot.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await setTimeout(delay);
      return startServer(retryCount + 1);
    } else if (error.code === 'EADDRINUSE' && retryCount < MAX_RETRIES) {
      console.log(`‚è≥ Port ${PORT} is in use, retrying after delay...`);
      await bot.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
      await setTimeout(INITIAL_DELAY * (retryCount + 1));
      return startServer(retryCount + 1);
    }
    
    console.error('üí• Failed to start bot:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
function setupShutdownHandlers() {
  process.once('SIGTERM', () => {
    console.log('üõë SIGTERM received');
    bot.stop();
    process.exit(0);
  });
  
  process.once('SIGINT', () => {
    console.log('üõë SIGINT received');
    bot.stop();
    process.exit(0);
  });
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
(async () => {
  setupShutdownHandlers();
  await startServer();
})();